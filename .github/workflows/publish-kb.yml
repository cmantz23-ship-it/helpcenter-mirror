name: Publish KB Mirror

on:
  workflow_dispatch: {}
  schedule:
    - cron: "0 3 * * *"   # nightly; optional

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4 tiktoken html2text tenacity mkdocs mkdocs-material

      - name: Export from Zendesk
        env:
          ZENDESK_SUBDOMAIN: ${{ secrets.ZENDESK_SUBDOMAIN }}
          ZENDESK_EMAIL: ${{ secrets.ZENDESK_EMAIL }}
          ZENDESK_API_TOKEN: ${{ secrets.ZENDESK_API_TOKEN }}
        run: |
          python export_zendesk_helpcenter.py

      - name: Build Markdown files & mkdocs.yml
        run: |
          python mkdocs_build.py

      - name: Build static site
        run: mkdocs build

      # -------- Knowledge artifacts for Custom GPT --------
      - name: Create ONE Markdown Knowledge Book
        run: |
          python - <<'PY'
          import json, os, re, unicodedata
          from pathlib import Path

          def slugify(s):
              s = (s or "article")
              s = unicodedata.normalize("NFKD", s).encode("ascii","ignore").decode("ascii")
              s = re.sub(r"[^a-zA-Z0-9]+","-", s).strip("-").lower()
              return s or "article"

          def iter_jsonl_robust(fp):
              dec = json.JSONDecoder()
              for raw in fp:
                  s = raw.strip()
                  if not s:
                      continue
                  i, n = 0, len(s)
                  while i < n:
                      start = s.find("{", i)
                      if start == -1:
                          break
                      try:
                          obj, end = dec.raw_decode(s, start)
                          yield obj
                          i = end
                          while i < n and s[i] in " \t\r\n,":
                              i += 1
                      except json.JSONDecodeError:
                          i = start + 1

          src = Path("zendesk_export/articles.jsonl")
          if not src.exists():
              raise SystemExit("Expected zendesk_export/articles.jsonl. Run export first.")

          # Collect and sort
          docs = []
          with src.open("r", encoding="utf-8") as f:
              for a in iter_jsonL_robust(f):
                  docs.append({
                      "locale": (a.get("locale") or "en-us").lower(),
                      "category": a.get("category_name") or "Uncategorized",
                      "section": a.get("section_name") or "General",
                      "title": a.get("title") or f'Article {a.get("article_id","")}',
                      "url": a.get("url") or "",
                      "body": a.get("body_markdown") or (a.get("body_html") or "").replace("\r","").strip()
                  })
          docs.sort(key=lambda d: (d["locale"], d["category"], d["section"], d["title"].lower()))

          # Build the book
          out = []
          out.append("# Montrium Help Center — Knowledge Book\n")
          out.append("> Consolidated mirror of selected Zendesk Help Center articles for AI ingestion.\n")
          out.append("\n## Table of Contents\n")
          for d in docs:
              anchor = f'{slugify(d["locale"])}-{slugify(d["category"])}-{slugify(d["section"])}-{slugify(d["title"])}'
              out.append(f'- [{d["locale"]} ▸ {d["category"]} ▸ {d["section"]} ▸ {d["title"]}](#{anchor})')
          out.append("\n---\n")
          for d in docs:
              anchor = f'{slugify(d["locale"])}-{slugify(d["category"])}-{slugify(d["section"])}-{slugify(d["title"])}'
              out.append(f'\n\n---\n\n')
              out.append(f'### {d["title"]}\n')
              out.append(f'<a id="{anchor}"></a>\n')
              out.append(f'**Locale:** {d["locale"]}  \n')
              out.append(f'**Category:** {d["category"]}  \n')
              out.append(f'**Section:** {d["section"]}  \n')
              if d["url"]:
                  out.append(f'**Canonical URL:** {d["url"]}\n')
              out.append("\n")
              out.append(d["body"].strip())
              out.append("\n")
          Path("knowledge_book.md").write_text("\n".join(out), encoding="utf-8")
          print("Wrote knowledge_book.md")
          PY

      - name: Upload Knowledge Book
        uses: actions/upload-artifact@v4
        with:
          name: knowledge_book_md
          path: knowledge_book.md

      - name: Upload export JSON (articles & chunks)
        uses: actions/upload-artifact@v4
        with:
          name: zendesk_export
          path: zendesk_export/

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./site
      # -----------------------------------------------------

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4
